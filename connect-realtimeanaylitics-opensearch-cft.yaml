AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Amazon OpenSearch Serverless template to create an IAM user, encryption policy, data access policy and collection V1'
Parameters:
  SolutionSourceBucket:
    Type: String
    Description: Source Bucket Name
  ConnectInstanceId:
    Type: String
    Default: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
    Description: Connect Instance Id only
  AgentEventDataStreamArn:
    Type: "String"
    Description: If you would like to use an existing data stream for Agent Events enter its arn. Leave blank if you want a new stream to be created. 

#######################
# CONDITIONS
#######################
Conditions:
    NewAgentEventStreamNeeded:  !Equals [!Ref "AgentEventDataStreamArn", ""]

#######################
# RESOURCES
#######################
Resources:

#######################
# OpenSearch Serverless
#######################
  NetworkPolicy:
    Type: 'AWS::OpenSearchServerless::SecurityPolicy'
    Properties:
      Name: !Sub '${AWS::StackName}-npol'
      Type: network
      Description: Network policy for aoss-connect collection
      Policy: >-
        [{"Rules":[{"ResourceType":"collection","Resource":["collection/connect"]}, {"ResourceType":"dashboard","Resource":["collection/connect"]}],"AllowFromPublic":true}]
  EncryptionPolicy:
    Type: 'AWS::OpenSearchServerless::SecurityPolicy'
    Properties:
      Name: !Sub '${AWS::StackName}-spol'
      Type: encryption
      Description: Encryption policy for aoss-connect collection
      Policy: >-
        {"Rules":[{"ResourceType":"collection","Resource":["collection/connect"]}],"AWSOwnedKey":true}
  Collection:
    Type: 'AWS::OpenSearchServerless::Collection'
    Properties:
      Name: connect
      Type: SEARCH
      Description: Collection to holds SEARCH data
    DependsOn: EncryptionPolicy

#######################
# SOlution - CFT Function
#######################
  SolutionLambdaIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName : !Sub '${AWS::StackName}--solutionLambdaIamRole'
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        ### Required to be * , for the resource action - CreateAccessPolicy, DeleteAccessPolicy, BatchGetCollection
        - PolicyName: aoss
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'aoss:CreateAccessPolicy'
                  - 'aoss:DeleteAccessPolicy'
                  - 'aoss:UpdateAccessPolicy'
                  - 'aoss:BatchGetCollection'
                  - 'aoss:APIAccessAll'
                  - 'es:*'
                Resource: '*'
        ### Required to be * , for the resource action
        - PolicyName: cloudwatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:GetMetricData'
                Resource: '*'
        ### Required to be * , for the resource action
        - PolicyName: dynamodb
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AOSSDataCache}'
        - PolicyName: connect
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'connect:ListQueues'
                  - 'connect:ListRoutingProfiles'
                  - 'connect:GetMetricData'
                  - 'connect:GetMetricDataV2'
                  - 'connect:GetCurrentMetricData'
                  - 'connect:ListInstanceStorageConfigs'
                  - 'connect:AssociateInstanceStorageConfig'
                  - 'connect:DisassociateInstanceStorageConfig'
                Resource: 
                  - !Sub 'arn:aws:connect:${AWS::Region}:${AWS::AccountId}:instance/${ConnectInstanceId}'
                  - !Sub 'arn:aws:connect:${AWS::Region}:${AWS::AccountId}:instance/${ConnectInstanceId}/*'
        - PolicyName: kinesis
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'kinesis:ListStreams'
                  - 'kinesis:DescribeStreamSummary'
                  - 'kinesis:ListShards'
                  - 'kinesis:DescribeStreamConsumer'
                  - 'kinesis:GetShardIterator'
                  - 'kinesis:GetRecords'
                  - 'kinesis:DescribeStream'
                  - 'kinesis:ListStreamConsumers'
                Resource: 
                  - !If [NewAgentEventStreamNeeded, !GetAtt AgentKinesisStream.Arn, !Sub "${AgentEventDataStreamArn}"]  

      Path: /
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  SolutionLambdaSourceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 900
      FunctionName: !Sub '${AWS::StackName}-SolutionLambdaSourceFunction'
      Role: !GetAtt SolutionLambdaIamRole.Arn
      CodeUri: 
        Bucket: !Ref SolutionSourceBucket
        Key: source-code.zip
      Handler: configuration/aossSetupConfiguration.handler
      Runtime: nodejs18.x
  SolutionLambdaTrigger:
    Type: 'Custom::SolutionLambdaTrigger'
    DependsOn: Collection
    Properties:
      CollectionName: connect
      ServiceToken: !GetAtt SolutionLambdaSourceFunction.Arn
      RequestToken: ${ClientRequestToken}
      AccountNumber: !Sub ${AWS::AccountId}
      Username: !Ref IAMUSer  
      FirehoseRole: !Ref FirehoseRole
      LambdaRole: !Ref SolutionLambdaIamRole

#######################
# USER
#######################
  IAMUSer:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: aossReadOnly
      Groups:
        - !Ref AossReadOnlyUserGroup

  AossReadOnlyUserGroup:
    Type: AWS::IAM::Group
    Properties:
      Policies:
        - PolicyName: AossReadOnlyUserGroup
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              ### Required to be * , for the resource action ListAccessPolicies
              - Effect: Allow
                Action:
                  - aoss:APIAccessAll
                  - aoss:ListAccessPolicies
                  - aoss:ListCollections
                  - aoss:ListSecurityPolicies
                  - aoss:ListTagsForResource
                  - aoss:BatchGetCollection
                Resource: "*"
              - Effect: Allow
                Action:
                  - aoss:DashboardsAccessAll
                Resource:
                  !Sub 'arn:aws:aoss:${AWS::Region}:${AWS::AccountId}:dashboards/default'

#######################
# ROLE
#######################
  FirehoseRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Condition:
            StringEquals:
              sts:ExternalId:
                Ref: AWS::AccountId
          Effect: Allow
          Principal:
            Service:
            - firehose.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - s3:AbortMultipartUpload
            - s3:GetBucketLocation
            - s3:GetObject
            - s3:ListBucket
            - s3:ListBucketMultipartUploads
            - s3:PutObject
            Effect: Allow
            Resource: 
              - !GetAtt "AmznConnectOutputBucket.Arn"            
          ### Required to be * , for the resource action - BatchGetCollection
          - Action:
              - 'aoss:BatchGetCollection'
              - 'aoss:APIAccessAll'
            Effect: Allow
            Resource: '*'
          Version: 2012-10-17
        PolicyName: firehoseRolePolicy
    Type: AWS::IAM::Role

#######################
# EVENT Rule
#######################
  ConnectEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Forward all AWS service events from default event bus to Open Search"
      State: ENABLED
      EventPattern:
        source:
          - aws.connect
        detail-type: 
        - "Amazon Connect Contact Event"
      Targets:
        - Arn: !GetAtt ConnectEventLambda.Arn
          Id: ConnectEventLambda
      EventBusName: default
  ConnectEventsRuleLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ConnectEventLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ConnectEventsRule.Arn

#######################
# S3 Bucket 
#######################
  AmznConnectOutputBucket:
    Properties:
      LifecycleConfiguration:
        Rules:
        - ExpirationInDays: 180
          Id: Move data to Glacier after 30 days and delete after 180 days.
          Status: Enabled
          Transitions:
          - StorageClass: Glacier
            TransitionInDays: 30
    Type: AWS::S3::Bucket

#######################
# KINESIS STREAM 
#######################
  AgentKinesisStream: 
    Properties:
      ShardCount: 2
    Type: AWS::Kinesis::Stream

#######################
# Batch Job
#######################
# Metrics Data - Every 1 mins
  BatchEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: execute every X mins
      Name: BatchEvent
      ScheduleExpression: 'rate(2 minutes)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt BatchEventLambda.Arn
          Id: BatchEventTarget
  BatchEventLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - BatchEvent
    Properties:
      FunctionName: !GetAtt BatchEventLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt BatchEvent.Arn
  BatchEventLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-BatchLambda'
      Handler: batchevent.handler
      CodeUri: 
        Bucket: !Ref SolutionSourceBucket
        Key: source-code.zip
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 900
      Description: CaseBatchEvent
      Role: !GetAtt SolutionLambdaIamRole.Arn
      Environment:
        Variables:
          CollectionEndpoint: !GetAtt Collection.CollectionEndpoint
          ConnectInstanceId: !Ref ConnectInstanceId
          ACCOUNT_ID: !Ref 'AWS::AccountId'
          AOSSDataCacheTable: !Ref AOSSDataCache

# Routing Profile & Queue - Every 15 mins
  CacheBatchEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: execute every X mins
      Name: CacheBatchEvent
      ScheduleExpression: 'rate(15 minutes)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt CacheBatchEventLambda.Arn
          Id: CacheBatchEventTarget
  CacheBatchEventLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - CacheBatchEvent
    Properties:
      FunctionName: !GetAtt CacheBatchEventLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CacheBatchEvent.Arn
  CacheBatchEventLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-CacheLambda'
      Handler: cacheBatchEvent.handler
      CodeUri: 
        Bucket: !Ref SolutionSourceBucket
        Key: source-code.zip
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 900
      Description: CacheBatchEvent
      Role: !GetAtt SolutionLambdaIamRole.Arn
      Environment:
        Variables:
          CollectionEndpoint: !GetAtt Collection.CollectionEndpoint
          ConnectInstanceId: !Ref ConnectInstanceId
          ACCOUNT_ID: !Ref 'AWS::AccountId'
          AOSSDataCacheTable: !Ref AOSSDataCache

# Cloudwatch Concurrent Call and Chat - Every 5 Mins
  CWBatchEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: execute every X mins
      Name: CWBatchEvent
      ScheduleExpression: 'rate(2 minutes)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt CWBatchEventLambda.Arn
          Id: CWBatchEventTarget
  CWBatchEventLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - CWBatchEvent
    Properties:
      FunctionName: !GetAtt CWBatchEventLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CWBatchEvent.Arn
  CWBatchEventLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-CloudWatchLambda'
      Handler: cloudWatchBatchEvent.handler
      CodeUri: 
        Bucket: !Ref SolutionSourceBucket
        Key: source-code.zip
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 900
      Description: CWBatchEvent
      Role: !GetAtt SolutionLambdaIamRole.Arn
      Environment:
        Variables:
          CollectionEndpoint: !GetAtt Collection.CollectionEndpoint
          ConnectInstanceId: !Ref ConnectInstanceId
          ACCOUNT_ID: !Ref 'AWS::AccountId'
          AOSSDataCacheTable: !Ref AOSSDataCache

#######################
# Dynamodb Table 
#######################
  AOSSDataCache:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: keyId
          AttributeType: S
      KeySchema: 
        - AttributeName: keyId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub '${AWS::StackName}-AOSSDataCache'

#######################
# Lambda Function, Agent kinesis stream to open search lambda
#######################
  AgentEventLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-AgentLambda'
      CodeUri: 
        Bucket: !Ref SolutionSourceBucket
        Key: source-code.zip
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 900
      Handler: agentEvent.handler
      Description: AgentEventLambda
      Role: !GetAtt SolutionLambdaIamRole.Arn
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !If [NewAgentEventStreamNeeded, !GetAtt AgentKinesisStream.Arn, !Sub "${AgentEventDataStreamArn}"]
            BatchSize: 1
            StartingPosition: LATEST
      Environment:
        Variables:
          CollectionEndpoint: !GetAtt Collection.CollectionEndpoint
          ConnectInstanceId: !Ref ConnectInstanceId
          ACCOUNT_ID: !Ref 'AWS::AccountId'
          AOSSDataCacheTable: !Ref AOSSDataCache

#######################
# ConnectEventLambda, connect events to open search lambda 
#######################
  ConnectEventLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-ConnectEventLambda'
      CodeUri: 
        Bucket: !Ref SolutionSourceBucket
        Key: source-code.zip
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 900
      Handler: connectEventLambda.handler
      Description: ConnectEventLambda
      Role: !GetAtt SolutionLambdaIamRole.Arn
      Environment:
        Variables:
          CollectionEndpoint: !GetAtt Collection.CollectionEndpoint
          ConnectInstanceId: !Ref ConnectInstanceId
          ACCOUNT_ID: !Ref 'AWS::AccountId'
          AOSSDataCacheTable: !Ref AOSSDataCache

#######################
# OUTPUT
#######################
Outputs:
  IAMUser:
    Value: !Ref IAMUSer
  DashboardURL:
    Value: !GetAtt Collection.DashboardEndpoint
  CollectionARN:
    Value: !GetAtt Collection.Arn
